################################
Admin documentation
################################

.. todo:: Možná spojit User a Admin dokumentaci do jednoho souboru, ale pro psaní dokumentace bude
          jednodušší to mít odděleně

**************************
Organizer
**************************

**************************
Admin
**************************


.. todo:: Creating new games, etc...

*********************
Diagnosing problems
*********************

Flawless execution of tournaments requires flawless inputs from multiple users of the platform and
there are several stages of the tournament lifetime which are prone to human errors. This section
provides a guide on how to diagnose and subsequently repair common errors when using the OPCAIC
platform.

Searching the log files
=========================

In case the problem is not evident from diagnostics visible in the administration section of the web
application, additional information can be retrieved from logs generated by the platform. Since the
platform backend is composed of multiple processes running potentially on different machines, we
reccommend installing Graylog alongside the platform for log aggregation and efficient log
searching. For installation instructions see :ref:`graylog-installation`.

The platform backend utilizes structured logging. Meaning that alongside regular log messages, all
messages are annotated with structured contextual data. It means e.g. that each log message produced
while processing a user request is annotated with a user id, username, email; each log message
regarding to some tournament will be annotated by the tournament id etc.

.. note:

   In default configuration, standard output of the server processes does not dump all variables
   listed below. The format of printed log messages can be configured in ``appsettings.json`` by
   adding an ``outputTemplate`` option to the console sink. See `Serilog github website
   <https://github.com/serilog/serilog-settings-configuration>`_ for more details.

Following sections list the most useful variables grouped by topic.

General variables
-----------------

StatusCode
  Status code returned from http request on the server's web API.

RequestPath
  Path part of the requests URL.
  
HttpRequestMethod
  HTTP method of the request.

ElapsedMilliseconds
  Time spent processing given request in milliseconds. 

User information
----------------
  
UserId
  Id of the author of the request.

UserEmail
  Email of the author of the request.

Username
  Id of the author of the request.

UserRole
  Id of the author of the request.

Ids of the relevant entities
----------------------------
 
In administration section of the web application, it is possible to see the unique ids of the
individual entities. These can used to filter out desired logs.

JobId
  Uniquely identifies a task dispatched to worker for execution. The task can be either submission
  validation or match execution.

SubmissionId
  Id of the user submission.

MatchId
  Id of the match.

ExecutionId
  Id of the match execution.

ValidationId
  Id of the submission validation.

TournamentId
  Id of the tournament.

TournamentState
  State of the tournament.

GameId
  Id of the game.

Task execution on a worker
--------------------------

Game
  Name of the game module servicing the match execution or submission validation. This corresponds
  to the game key from the game administration screen.
  
EntryPoint
  Name of the entry point being executed.
  
GameModuleProcessExitCode
  Exit code of the game module process.
  
GameModulePID
  Process ID of the game module process.
